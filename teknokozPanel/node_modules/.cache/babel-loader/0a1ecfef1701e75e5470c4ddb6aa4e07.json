{"ast":null,"code":"import axios from \"axios\";\nimport router from \"@/router\";\nexport default {\n  name: \"newCategoryView\",\n\n  data() {\n    return {\n      newCategory: {\n        name: '',\n        image1: null,\n        content: ''\n      }\n    };\n  },\n\n  methods: {\n    createNewCategory() {\n      let formdata = new FormData();\n\n      if (this.newCategory.image1 !== null) {\n        formdata.append('image1', this.newCategory.image1);\n      }\n\n      formdata.append('name', this.newCategory.name);\n      formdata.append('content', this.newCategory.content);\n      axios.post('http://127.0.0.1:8000/api/category', formdata, {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem('token'),\n          'Content-Type': \"multipart/form-data; charset=utf-8\"\n        }\n      }).then(response => {\n        let timerInterval;\n        this.$swal.fire({\n          toast: true,\n          text: response.data,\n          timer: 1000,\n          width: '250px',\n          icon: 'success',\n          position: 'top-end',\n          timerProgressBar: true,\n          showConfirmButton: false,\n          didOpen: () => {\n            this.Swal.showLoading();\n            const b = this.Swal.getHtmlContainer().querySelector('b');\n            timerInterval = setInterval(() => {\n              b.textContent = this.Swal.getTimerLeft();\n            }, 100);\n          },\n          willClose: () => {\n            clearInterval(timerInterval);\n          }\n        });\n        setTimeout(function () {\n          router.push(\"/category\");\n        }, 1600);\n      }).catch(error => {\n        let timerInterval;\n        this.$swal.fire({\n          text: error.response.data.message,\n          timer: 1000,\n          width: '450px',\n          icon: 'error',\n          timerProgressBar: true,\n          showConfirmButton: false,\n          didOpen: () => {\n            this.Swal.showLoading();\n            const b = this.Swal.getHtmlContainer().querySelector('b');\n            timerInterval = setInterval(() => {\n              b.textContent = this.Swal.getTimerLeft();\n            }, 100);\n          },\n          willClose: () => {\n            clearInterval(timerInterval);\n          }\n        });\n      });\n    },\n\n    uploadFile(e) {\n      if (this.$refs.file.files[0] !== null) {\n        this.newCategory.image1 = this.$refs.file.files[0];\n      } else {\n        this.newCategory.image1 = null;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA6BA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe;EACbC,IAAI,EAAE,iBADO;;EAEbC,IAAI,GAAE;IACJ,OAAM;MACJC,WAAW,EAAC;QACVF,IAAI,EAAE,EADI;QAEVG,MAAM,EAAE,IAFE;QAGVC,OAAO,EAAE;MAHC;IADR,CAAN;EAOD,CAVY;;EAWZC,OAAO,EAAC;IACPC,iBAAiB,GAAE;MACjB,IAAIC,QAAO,GAAI,IAAIC,QAAJ,EAAf;;MACA,IAAI,KAAKN,WAAL,CAAiBC,MAAjB,KAA4B,IAAhC,EAAqC;QACnCI,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAAyB,KAAKP,WAAL,CAAiBC,MAA1C;MACF;;MACAI,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,KAAKP,WAAL,CAAiBF,IAAzC;MACAO,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2B,KAAKP,WAAL,CAAiBE,OAA5C;MACAN,KAAK,CAACY,IAAN,CAAW,oCAAX,EAAgDH,QAAhD,EACK;QACCI,OAAO,EAAE;UACPC,aAAa,EAAE,YAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADpB;UAEP,gBAAgB;QAFT;MADV,CADL,EAMOC,IANP,CAMYC,QAAO,IAAK;QAClB,IAAIC,aAAJ;QACA,KAAKC,KAAL,CAAWC,IAAX,CAAgB;UACdC,KAAK,EAAC,IADQ;UAEdC,IAAI,EAAEL,QAAQ,CAACf,IAFD;UAGdqB,KAAK,EAAE,IAHO;UAIdC,KAAK,EAAE,OAJO;UAKdC,IAAI,EAAC,SALS;UAMdC,QAAQ,EAAC,SANK;UAOdC,gBAAgB,EAAE,IAPJ;UAQdC,iBAAiB,EAAC,KARJ;UAUdC,OAAO,EAAE,MAAM;YACb,KAAKC,IAAL,CAAUC,WAAV;YACA,MAAMC,IAAI,KAAKF,IAAL,CAAUG,gBAAV,GAA6BC,aAA7B,CAA2C,GAA3C,CAAV;YACAhB,aAAY,GAAIiB,WAAW,CAAC,MAAM;cAChCH,CAAC,CAACI,WAAF,GAAgB,KAAKN,IAAL,CAAUO,YAAV,EAAhB;YACD,CAF0B,EAExB,GAFwB,CAA3B;UAGD,CAhBa;UAiBdC,SAAS,EAAE,MAAM;YACfC,aAAa,CAACrB,aAAD,CAAb;UACD;QAnBa,CAAhB;QAoBJsB,UAAU,CAAC,YAAU;UACnBxC,MAAM,CAACyC,IAAP,CAAY,WAAZ;QACD,CAFS,EAER,IAFQ,CAAV;MAGD,CA/BD,EA+BGC,KA/BH,CA+BSC,KAAI,IAAK;QAChB,IAAIzB,aAAJ;QACA,KAAKC,KAAL,CAAWC,IAAX,CAAgB;UACdE,IAAI,EAAEqB,KAAK,CAAC1B,QAAN,CAAef,IAAf,CAAoB0C,OADZ;UAEdrB,KAAK,EAAE,IAFO;UAGdC,KAAK,EAAE,OAHO;UAIdC,IAAI,EAAC,OAJS;UAKdE,gBAAgB,EAAE,IALJ;UAMdC,iBAAiB,EAAC,KANJ;UAOdC,OAAO,EAAE,MAAM;YACb,KAAKC,IAAL,CAAUC,WAAV;YACA,MAAMC,IAAI,KAAKF,IAAL,CAAUG,gBAAV,GAA6BC,aAA7B,CAA2C,GAA3C,CAAV;YACAhB,aAAY,GAAIiB,WAAW,CAAC,MAAM;cAChCH,CAAC,CAACI,WAAF,GAAgB,KAAKN,IAAL,CAAUO,YAAV,EAAhB;YACD,CAF0B,EAExB,GAFwB,CAA3B;UAGD,CAba;UAcdC,SAAS,EAAE,MAAM;YACfC,aAAa,CAACrB,aAAD,CAAb;UACD;QAhBa,CAAhB;MAiBD,CAlDD;IAmDD,CA3DM;;IA4DP2B,UAAU,CAACC,CAAD,EAAI;MACZ,IAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,MAA6B,IAAhC,EAAqC;QACnC,KAAK9C,WAAL,CAAiBC,MAAjB,GAA2B,KAAK2C,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,CAA3B;MACD,CAFD,MAEM;QACJ,KAAK9C,WAAL,CAAiBC,MAAjB,GAA2B,IAA3B;MACF;IACD;;EAlEM;AAXI,CAAf","names":["axios","router","name","data","newCategory","image1","content","methods","createNewCategory","formdata","FormData","append","post","headers","Authorization","localStorage","getItem","then","response","timerInterval","$swal","fire","toast","text","timer","width","icon","position","timerProgressBar","showConfirmButton","didOpen","Swal","showLoading","b","getHtmlContainer","querySelector","setInterval","textContent","getTimerLeft","willClose","clearInterval","setTimeout","push","catch","error","message","uploadFile","e","$refs","file","files"],"sourceRoot":"","sources":["/Users/gurhankoz/Desktop/teknokozpanel/src/views/Category/newCategoryView.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"createNewCategory\">\n  <div class=\"divNewItem\">\n    <div class=\"mb-3\">\n      <label for=\"exampleFormControlInput1\" class=\"form-label\">Kategori Adı</label>\n      <input type=\"form-control\" class=\"form-control\" id=\"exampleFormControlInput1\" v-model=\"newCategory.name\">\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"formFile\" class=\"form-label\">Resim</label>\n      <input class=\"form-control\" type=\"file\" id=\"formFile\" ref=\"file\" @change=\"uploadFile\">\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"exampleFormControlTextarea1\" class=\"form-label\">İçerik</label>\n      <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\" v-model=\"newCategory.content\"></textarea>\n    </div>\n    <div class=\"newItemBtnGroup\">\n      <button class=\"btn kytBtn\" type=\"submit\">Kaydet</button>\n      <router-link\n          to=\"/category\"\n          class=\"btn closeBtn\"\n      >\n        İptal\n      </router-link>\n    </div>\n  </div>\n  </form>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport router from \"@/router\";\n\nexport default {\n  name: \"newCategoryView\",\n  data(){\n    return{\n      newCategory:{\n        name: '',\n        image1: null,\n        content: '',\n      }\n    }\n  },\n   methods:{\n    createNewCategory(){\n      let formdata = new FormData();\n      if (this.newCategory.image1 !== null){\n        formdata.append('image1',this.newCategory.image1)\n      }\n      formdata.append('name', this.newCategory.name)\n      formdata.append('content', this.newCategory.content)\n      axios.post('http://127.0.0.1:8000/api/category',formdata\n          ,{\n            headers: {\n              Authorization: \"Bearer \" + localStorage.getItem('token'),\n              'Content-Type': \"multipart/form-data; charset=utf-8\",\n            },\n          }).then(response => {\n            let timerInterval;\n            this.$swal.fire({\n              toast:true,\n              text: response.data,\n              timer: 1000,\n              width: '250px',\n              icon:'success',\n              position:'top-end',\n              timerProgressBar: true,\n              showConfirmButton:false,\n\n              didOpen: () => {\n                this.Swal.showLoading()\n                const b = this.Swal.getHtmlContainer().querySelector('b')\n                timerInterval = setInterval(() => {\n                  b.textContent = this.Swal.getTimerLeft()\n                }, 100)\n              },\n              willClose: () => {\n                clearInterval(timerInterval)\n              }})\n        setTimeout(function(){\n          router.push(\"/category\");\n        },1600)\n      }).catch(error => {\n        let timerInterval;\n        this.$swal.fire({\n          text: error.response.data.message,\n          timer: 1000,\n          width: '450px',\n          icon:'error',\n          timerProgressBar: true,\n          showConfirmButton:false,\n          didOpen: () => {\n            this.Swal.showLoading()\n            const b = this.Swal.getHtmlContainer().querySelector('b')\n            timerInterval = setInterval(() => {\n              b.textContent = this.Swal.getTimerLeft()\n            }, 100)\n          },\n          willClose: () => {\n            clearInterval(timerInterval)\n          }})\n      })\n    },\n    uploadFile(e) {\n      if(this.$refs.file.files[0] !== null){\n        this.newCategory.image1  = this.$refs.file.files[0]\n      }else {\n        this.newCategory.image1  = null\n      }\n    },\n    },\n}\n</script>\n\n<style scoped>\n.newItemBtnGroup{\n  text-align: end;\n}\n.btn{\n  border: none;\n  transition: transform .2s;\n}\n.kytBtn{\n  background-color: #B1D7B4;\n  font-size: 15px;\n  margin: 8px;\n}\n.closeBtn{\n  background-color: #EB1D36;\n  font-size: 15px;\n  margin: 8px;\n}\n.kytBtn:hover{\n  transform: scale(1.1);\n}\n.closeBtn:hover{\n  transform: scale(1.1);\n}\n</style>"]},"metadata":{},"sourceType":"module"}